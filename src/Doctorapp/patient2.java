/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Doctorapp;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class patient2 extends javax.swing.JFrame {

    /**
     * Creates new form patient
     */
    public patient2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        addptnt = new javax.swing.JButton();
        regptnt = new javax.swing.JButton();
        datetbl = new javax.swing.JScrollPane();
        call = new javax.swing.JTable();
        crntmnth = new javax.swing.JLabel();
        crntyr = new javax.swing.JLabel();
        nxtmnth = new javax.swing.JButton();
        nxtyr = new javax.swing.JButton();
        pvsmnth = new javax.swing.JButton();
        pvsyr = new javax.swing.JButton();
        name = new javax.swing.JLabel();
        nametxt = new javax.swing.JTextField();
        age = new javax.swing.JLabel();
        agetxt = new javax.swing.JTextField();
        adrstxt = new javax.swing.JTextField();
        address = new javax.swing.JLabel();
        phone = new javax.swing.JLabel();
        notxt = new javax.swing.JTextField();
        namereg = new javax.swing.JLabel();
        regname = new javax.swing.JTextField();
        pay = new javax.swing.JLabel();
        paytxt = new javax.swing.JTextField();
        A = new javax.swing.JScrollPane();
        events = new javax.swing.JTable();
        B = new javax.swing.JScrollPane();
        time = new javax.swing.JTable();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        logout.setText("LogOut");

        addptnt.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        addptnt.setText("Add Patient");
        addptnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addptntActionPerformed(evt);
            }
        });

        regptnt.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        regptnt.setText("Register");
        regptnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regptntActionPerformed(evt);
            }
        });

        call.setAutoCreateRowSorter(true);
        call.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        call.setColumnSelectionAllowed(true);
        call.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                callMouseClicked(evt);
            }
        });
        datetbl.setViewportView(call);
        call.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        nxtmnth.setText(">");
        nxtmnth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtmnthActionPerformed(evt);
            }
        });

        nxtyr.setText(">>");
        nxtyr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtyrActionPerformed(evt);
            }
        });

        pvsmnth.setText("<");
        pvsmnth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pvsmnthActionPerformed(evt);
            }
        });

        pvsyr.setText("<<");
        pvsyr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pvsyrActionPerformed(evt);
            }
        });

        name.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        name.setText("Name:");

        nametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nametxtActionPerformed(evt);
            }
        });

        age.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        age.setText("Age:");

        agetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agetxtActionPerformed(evt);
            }
        });

        adrstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adrstxtActionPerformed(evt);
            }
        });

        address.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        address.setText("Address:");

        phone.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        phone.setText("Phone No:");

        notxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notxtActionPerformed(evt);
            }
        });

        namereg.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        namereg.setText("Name:");

        regname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regnameActionPerformed(evt);
            }
        });

        pay.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        pay.setText("Pay:");

        paytxt.setEditable(false);
        paytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paytxtActionPerformed(evt);
            }
        });

        events.setAutoCreateRowSorter(true);
        events.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Room 1", "Room 2", "Room 3", "Room 4"
            }
        ));
        events.setCellSelectionEnabled(true);
        events.setRowHeight(70);
        events.setShowGrid(true);
        A.setViewportView(events);

        time.setAutoCreateRowSorter(true);
        time.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Time"
            }
        ));
        time.setRowHeight(70);
        time.setShowGrid(true);
        B.setViewportView(time);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(B, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(A))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(name)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(age)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(agetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(address)
                                        .addGap(18, 18, 18)
                                        .addComponent(adrstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addptnt, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(phone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(notxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(namereg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(regname, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(regptnt, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pay)
                                        .addGap(24, 24, 24)
                                        .addComponent(paytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(8, 8, 8)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(pvsyr, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pvsmnth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(crntmnth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(crntyr, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nxtmnth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nxtyr, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(datetbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nxtyr)
                            .addComponent(nxtmnth)
                            .addComponent(crntyr)
                            .addComponent(crntmnth)
                            .addComponent(pvsmnth)
                            .addComponent(pvsyr))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datetbl, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(namereg)
                                .addComponent(regname, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(7, 7, 7)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(paytxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pay))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(regptnt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(name)
                                    .addComponent(nametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(age)
                                    .addComponent(agetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(address)
                                    .addComponent(adrstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(phone)
                                    .addComponent(notxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(addptnt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(B)
                    .addComponent(A))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed

        System.exit(1);
    }//GEN-LAST:event_exitActionPerformed

    String[] months= {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    String[] days= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat" };
    public static ArrayList<patients> ptns= new ArrayList<>();
    patients ptnt;
    DateFormat dateformat ;
    Calendar cd;
    DefaultTableModel mode1;
    DefaultTableModel mode2;
    DefaultTableModel mode3;
    int month;
    int year;
    int day;
    int mon;
    int row;
    int col;
    int ID;
    int maxday;
    int maxday1;
    int start;
    int start1;
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        // this code like constructor
        
        // creating new moel of table
        mode1 =new DefaultTableModel();
        mode2 =new DefaultTableModel();
        mode3 =new DefaultTableModel();
        
        //setting table to the new model
        call.setModel(mode1);
        
        // creating new columns with 6 rows
        mode1.addColumn("SUN");
        mode1.addColumn("MON");
        mode1.addColumn("TUE");
        mode1.addColumn("WED");
        mode1.addColumn("THU");
        mode1.addColumn("FRI");
        mode1.addColumn("SAT");
        mode1.setRowCount(6);
        
        // getting year of current time
        dateformat = new SimpleDateFormat("yyyy");
        
        //
        cd=Calendar.getInstance(); 
        
        // naming the label with the current year
        crntyr.setText(dateformat.format(cd.getTime()));
        year=Integer.parseInt(dateformat.format(cd.getTime()));

        
        // getting month of current time
        dateformat = new SimpleDateFormat("MM");
        
        
        // naming the label with the current month from array
        crntmnth.setText(months[Integer.parseInt(dateformat.format(cd.getTime()))-1]);
        
        //saving the current month in variable month
        month = Integer.parseInt(dateformat.format(cd.getTime()));
        mon=month-1;

        
        // getting day of current time
        dateformat = new SimpleDateFormat("dd");
        
        //saving the current day in variable day
        day =Integer.parseInt(dateformat.format(cd.getTime()));
        
        //getting max day of current month
        int maxday =cd.getActualMaximum(Calendar.DAY_OF_MONTH);
        
        //getting max day of weeks of month
        int start =cd.getActualMaximum(Calendar.DAY_OF_WEEK);
        
        //Creating number of day of current month
        start--;
        int j=0;
        for(int i=0;i<maxday;i++)
        {
            mode1.setValueAt(i+1, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        
        events.setModel(mode3);
        time.setModel(mode2);
        mode2.addColumn("Time");
        mode3.addColumn("Room 1");
        mode3.addColumn("Room 2");
        mode3.addColumn("Room 3");
        mode3.setRowCount(6);
        mode2.setRowCount(6);
        A.setViewportView(events);
        B.setViewportView(time);
    }//GEN-LAST:event_formWindowOpened

    private void nxtmnthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtmnthActionPerformed

        if (mon<11)
        {
        // add 1 to counter to select next month
        mon=mon+1;
                
        // selecting the month and changing the label with the name of this month
        crntmnth.setText(months[mon]);
        
        //naming each box with null
        int j=0;
        start1=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start1);
            start1++;
            if(start1==7){
                start1=0;
                 j++;
            }
        }

        // making date display day name of day,dd/mm/yyyy
        cd =Calendar.getInstance();
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of next month
        maxday1 =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

        //getting start of next month
        start1=0;
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start1=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday1;i++)
        {
            mode1.setValueAt(i+1, j, start1);
            start1++;
            if(start1==7){
                start1=0;
                 j++;
            }
        }
        
        //_______________________________________________________________________________________________
        
        }else if (mon==11)
        {
            year=year+1;
            mon=0;
            
        // selecting the month and changing the label with the name of this month
        crntmnth.setText(months[mon]);
        crntyr.setText(""+year);
        
        //naming each box with null
        int j=0;
        start1=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start1);
            start1++;
            if(start1==7){
                start1=0;
                 j++;
            }
        }

        // making date display day name of day,dd/mm/yyyy
        cd =Calendar.getInstance();
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of next month
        maxday1 =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

        //getting start of next month
        start1=0;
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start1=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday1;i++)
        {
            mode1.setValueAt(i+1, j, start1);
            start1++;
            if(start1==7){
                start1=0;
                 j++;
            }
        }
        }
    }//GEN-LAST:event_nxtmnthActionPerformed

    private void pvsmnthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pvsmnthActionPerformed
 
       
        if (mon>0)
        {
            
        // add 1 to counter to select perv. month
        mon=mon-1;
                
        // selecting the month and changing the label with the name of this month
        crntmnth.setText(months[mon]);
        
        //naming each box with null
        int j=0;
        start=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        
        // making date display day name of day,dd/mm/yyyy
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of prev. month
        maxday =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

          
        //getting start of prev. month
        start=0;
        cd=Calendar.getInstance();
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday;i++)
        {
            mode1.setValueAt(i+1, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        }
        
        //____________________________________________________________________________________________
        
        else if (mon==0)
        {
            year=year-1;
            mon=11;
            
        // selecting the month and changing the label with the name of this month
        crntmnth.setText(months[mon]);
        crntyr.setText(""+year);
        
        //naming each box with null
        int j=0;
        start=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        
        // making date display day name of day,dd/mm/yyyy
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of prev. month
        maxday =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

          
        //getting start of prev. month
        start=0;
        cd=Calendar.getInstance();
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday;i++)
        {
            mode1.setValueAt(i+1, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
            
        }
        
    }//GEN-LAST:event_pvsmnthActionPerformed

    private void nxtyrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtyrActionPerformed

        year=year+1;
        crntyr.setText(""+year);
        
        //naming each box with null
        int j=0;
        start=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        
        // making date display day name of day,dd/mm/yyyy
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of prev. month
        maxday =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

          
        //getting start of prev. month
        start=0;
        cd=Calendar.getInstance();
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday;i++)
        {
            mode1.setValueAt(i+1, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
    }//GEN-LAST:event_nxtyrActionPerformed

    private void pvsyrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pvsyrActionPerformed

        year=year-1;
        crntyr.setText(""+year);
        
        //naming each box with null
        int j=0;
        start=0;
        for(int i=0;i<42;i++)
        {
            mode1.setValueAt(null, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
        
        // making date display day name of day,dd/mm/yyyy
        DateFormat df1 =new SimpleDateFormat("EEE,dd/MM/yyyy");
        
        //getting max day of prev. month
        maxday =cd.getActualMaximum(Calendar.DAY_OF_MONTH);

          
        //getting start of prev. month
        start=0;
        cd=Calendar.getInstance();
        cd.setTime(new Date(year-1900, mon, 1));
        String s=df1.format(cd.getTime());
        for(int i=0;i<days.length;i++)
        {
           if(s.contains(days[i]))
           {
              start=i; 
           }
        }
        
        //creating the new row and naming each box with no of day in month
        j=0;
        for(int i=0;i<maxday;i++)
        {
            mode1.setValueAt(i+1, j, start);
            start++;
            if(start==7){
                start=0;
                 j++;
            }
        }
    }//GEN-LAST:event_pvsyrActionPerformed

    private void callMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_callMouseClicked

       row= call.rowAtPoint(evt.getPoint());
       col= call.columnAtPoint(evt.getPoint());
    }//GEN-LAST:event_callMouseClicked

    private void addptntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addptntActionPerformed

        String nam =nametxt.getText();
        int ag =Integer.parseInt(agetxt.getText());
        String adrs=adrstxt.getText();
        int nom=Integer.parseInt(notxt.getText());
        
        if(adrs.equals("")&&notxt.getText().equals(""))
        {
            ID++;
            ptns.add(ptnt= new patients(nam,ag,ID));
        }
        else if(notxt.getText().equals(""))
        {
            ID++;
            ptns.add(ptnt= new patients(nam,adrs,ag,ID));
        }else if(adrs.equals("")){
            ID++;
            ptns.add(ptnt= new patients(nam,ag,ID,nom));
        }
        
    }//GEN-LAST:event_addptntActionPerformed

    private void regptntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regptntActionPerformed

        String nam=nametxt.getText();
        int pay=Integer.parseInt(paytxt.getText());
        for(int i=0;i<ptns.size();i++){
            
            if(ptns.get(i).name.contains(nam)){
                int yes= JOptionPane.showConfirmDialog(this, ""+ptns.get(i).Getdata());
                if(yes==1){
                    ptns.get(i).buying(pay);
                }
            }
            
        }
    }//GEN-LAST:event_regptntActionPerformed

    private void nametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nametxtActionPerformed

        agetxt.requestFocus();
        agetxt.setText("");
    }//GEN-LAST:event_nametxtActionPerformed

    private void agetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agetxtActionPerformed

        adrstxt.requestFocus();
        adrstxt.setText("");
    }//GEN-LAST:event_agetxtActionPerformed

    private void adrstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adrstxtActionPerformed

        notxt.requestFocus();
        notxt.setText("");
    }//GEN-LAST:event_adrstxtActionPerformed

    private void notxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notxtActionPerformed

        addptnt.requestFocus();
    }//GEN-LAST:event_notxtActionPerformed

    private void regnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regnameActionPerformed

        paytxt.requestFocus();
    }//GEN-LAST:event_regnameActionPerformed

    private void paytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paytxtActionPerformed

        regptnt.requestFocus();
    }//GEN-LAST:event_paytxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patient2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patient2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patient2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patient2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patient2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane A;
    private javax.swing.JScrollPane B;
    private javax.swing.JButton addptnt;
    private javax.swing.JLabel address;
    private javax.swing.JTextField adrstxt;
    private javax.swing.JLabel age;
    private javax.swing.JTextField agetxt;
    private javax.swing.JTable call;
    private javax.swing.JLabel crntmnth;
    private javax.swing.JLabel crntyr;
    private javax.swing.JScrollPane datetbl;
    private javax.swing.JTable events;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logout;
    private javax.swing.JLabel name;
    private javax.swing.JLabel namereg;
    private javax.swing.JTextField nametxt;
    private javax.swing.JTextField notxt;
    private javax.swing.JButton nxtmnth;
    private javax.swing.JButton nxtyr;
    private javax.swing.JLabel pay;
    private javax.swing.JTextField paytxt;
    private javax.swing.JLabel phone;
    private javax.swing.JButton pvsmnth;
    private javax.swing.JButton pvsyr;
    private javax.swing.JTextField regname;
    private javax.swing.JButton regptnt;
    private javax.swing.JTable time;
    // End of variables declaration//GEN-END:variables
}
